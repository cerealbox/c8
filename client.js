// Generated by psc-bundle 0.9.3
var PS = {};
(function(exports) {                 

  exports.display = function(gs) {
	  return function() {
		  if (typeof document != 'undefined')
			  displayo(gs)
	  }
  }

  // ================================================================================
  var uiEvents = []
  var uiCallback
  if (typeof window != 'undefined') {
	  window.onmouseup = function(e) {
		  uiEvents.push(new PS.Client.Click())
	      if (uiCallback) {
		      while (uiEvents.length)
		          uiCallback()	
	      }
	  }
  }

  exports.getMouseEvent = function() {
	  return uiEvents.shift()
  }

  exports.waitForMouseEvent = function(f) {

      return function() {
          uiCallback = f
          while (uiEvents.length)
              uiCallback()
      }
  }
})(PS["Client"] = PS["Client"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Data.Functor

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq); 
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 78, column 3 - line 78, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 137, column 3 - line 137, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["Foldable"] = Foldable;
  exports["find"] = find;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]()))(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 46, column 3 - line 46, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 243, column 1 - line 243, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 89, column 3 - line 89, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {var log = console.log.bind(console)
  // -------------------------------------------------------------

  // -------------------------------------------------------------

  //======================================================================
  var socket
  var events = []
  var callback

  exports.send = function(msg) {
      return function() {
          socket.send(JSON.stringify(msg))
      }
  }

  exports.connect = function(ip) {
      return function(port) {
          return function() {
              log("[connecting to websocket]")
              socket = new WebSocket("ws://" + ip + ":" + port + "/");
              socket.onopen = function(e) { 
                  log("[websocket connected]")
              }
              socket.onclose = function(e) { log("[websocket closed]") }
              socket.onmessage = function(e) { 
                  events.push(new PS.WS.ServerMessage(JSON.parse(e.data)))
                  if (callback) {
                      while (events.length)
                          callback()
                  }
              }
          }
      }
  }

  exports.waitForEvent = function(f) {
      return function() {
          if (!socket)
              log("websocket server not started.  call 'listen'.")

          callback = f
          while (events.length)
              callback()
      }
  }


  exports.getEvent = function() {
      return events.shift()
  }
})(PS["WS"] = PS["WS"] || {});
(function(exports) {// module Data.Argonaut.Core

  function id(x) {
      return x;
  } 

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports._foldJson = function(isNull, isBool, isNum, isStr, isArr, isObj, j) {
      if (j == null) return isNull(null);
      else if (typeof j === 'boolean') return isBool(j);
      else if (typeof j === 'number') return isNum(j);
      else if (typeof j === 'string') return isStr(j);
      else if (Object.prototype.toString.call(j) === '[object Array]')
          return isArr(j);
      else return isObj(j);
  };

  function _compare(EQ, GT, LT, a, b) {
      function isArray(a) {
          return Object.prototype.toString.call(a) === '[object Array]';
      }
      function keys(o) {
          var a = [];
          for (var k in o) {
              a.push(k);
          }
          return a;
      }

      if (a == null) {
          if (b == null) return EQ;
          else return LT;
      } else if (typeof a === 'boolean') {
          if (typeof b === 'boolean') {
              // boolean / boolean
              if (a === b) return EQ;
              else if (a == false) return LT;
              else return GT;
          } else if (b == null) return GT;
          else return LT;
      } else if (typeof a === 'number') {
          if (typeof b === 'number') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else return LT;
      } else if (typeof a === 'string') {
          if (typeof b === 'string') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else return LT;
      } else if (isArray(a)) {
          if (isArray(b)) {
              for (var i = 0; i < Math.min(a.length, b.length); i++) {
                  var c = _compare(EQ, GT, LT, a[i], b[i]);
                
                  if (c !== EQ) return c;
              }
              if (a.length === b.length) return EQ;
              else if (a.length < b.length) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else return LT;
      }
      else {
          if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else if (isArray(b)) return GT;
          else {
              var akeys = keys(a);
              var bkeys = keys(b);
            
              var keys = akeys.concat(bkeys).sort();
            
              for (var i = 0; i < keys.length; i++) {
                  var k = keys[i];
                
                  if (a[k] === undefined) return LT;
                  else if (b[k] === undefined) return GT;
                
                  var c = _compare(EQ, GT, LT, a[k], b[k]);
                
                  if (c !== EQ) return c;
              }
            
              if (akeys.length === bkeys.length) return EQ;
              else if (akeys.length < bkeys.length) return LT;
              else return GT;
          }
      }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $49 = comp(x)(y);
                  if ($49 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($49 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($49 instanceof Data_Ordering.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 436, column 15 - line 441, column 1: " + [ $49.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  exports["sortBy"] = sortBy;
  exports["zipWithA"] = zipWithA;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["toChar"] = toChar;
  exports["singleton"] = $foreign.singleton;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var SigChar = (function () {
      function SigChar() {

      };
      SigChar.value = new SigChar();
      return SigChar;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var SigUnit = (function () {
      function SigUnit() {

      };
      SigUnit.value = new SigUnit();
      return SigUnit;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create); 
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SigChar"] = SigChar;
  exports["SigArray"] = SigArray;
  exports["SigUnit"] = SigUnit;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gEq"] = gEq;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericBool"] = genericBool;
  exports["eqGenericSpine"] = eqGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 719, column 3 - line 719, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var genericList = function (dictGeneric) {
      return new Data_Generic.Generic(function (v) {
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Nil" && v.value1.length === 0)) {
              return new Data_Maybe.Just(Nil.value);
          };
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Cons" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Cons.create))(Data_Generic.fromSpine(dictGeneric)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericList(dictGeneric))(v.value1[1](Data_Unit.unit)));
          };
          return Data_Maybe.Nothing.value;
      }, function ($dollarq) {
          return new Data_Generic.SigProd("Data.List.List", [ {
              sigConstructor: "Data.List.Nil", 
              sigValues: [  ]
          }, {
              sigConstructor: "Data.List.Cons", 
              sigValues: [ function ($dollarq1) {
                  return Data_Generic.toSignature(dictGeneric)(Data_Generic.anyProxy);
              }, function ($dollarq1) {
                  return Data_Generic.toSignature(genericList(dictGeneric))(Data_Generic.anyProxy);
              } ]
          } ]);
      }, function (v) {
          if (v instanceof Nil) {
              return new Data_Generic.SProd("Data.List.Nil", [  ]);
          };
          if (v instanceof Cons) {
              return new Data_Generic.SProd("Data.List.Cons", [ function ($dollarq) {
                  return Data_Generic.toSpine(dictGeneric)(v.value0);
              }, function ($dollarq) {
                  return Data_Generic.toSpine(genericList(dictGeneric))(v.value1);
              } ]);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 369, column 1 - line 374, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Cons) {
                  return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 594, column 1 - line 594, column 23: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match at Data.List line 362, column 1 - line 362, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };                                                                         
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List line 754, column 3 - line 754, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, Data_Function.flip(concatMap));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["concatMap"] = concatMap;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["filter"] = filter;
  exports["length"] = length;
  exports["reverse"] = reverse;
  exports["genericList"] = genericList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              Data_StrMap_ST.poke(v1)(k)(v)();
              return v1;
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };                                                                                                 
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["singleton"] = singleton;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(foldJsonString);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toNumber = toJsonType(foldJsonNumber);
  var foldJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var toBoolean = toJsonType(foldJsonBoolean);
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonBoolean"] = foldJsonBoolean;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonString"] = foldJsonString;
  exports["toArray"] = toArray;
  exports["toBoolean"] = toBoolean;
  exports["toNumber"] = toNumber;
  exports["toObject"] = toObject;
  exports["toString"] = toString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromObject"] = $foreign.fromObject;
  exports["fromString"] = $foreign.fromString;
  exports["jsonNull"] = $foreign.jsonNull;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Clubs = (function () {
      function Clubs() {

      };
      Clubs.value = new Clubs();
      return Clubs;
  })();
  var Spades = (function () {
      function Spades() {

      };
      Spades.value = new Spades();
      return Spades;
  })();
  var Hearts = (function () {
      function Hearts() {

      };
      Hearts.value = new Hearts();
      return Hearts;
  })();
  var Diamonds = (function () {
      function Diamonds() {

      };
      Diamonds.value = new Diamonds();
      return Diamonds;
  })();
  var Ace = (function () {
      function Ace() {

      };
      Ace.value = new Ace();
      return Ace;
  })();
  var Two = (function () {
      function Two() {

      };
      Two.value = new Two();
      return Two;
  })();
  var Three = (function () {
      function Three() {

      };
      Three.value = new Three();
      return Three;
  })();
  var Four = (function () {
      function Four() {

      };
      Four.value = new Four();
      return Four;
  })();
  var Five = (function () {
      function Five() {

      };
      Five.value = new Five();
      return Five;
  })();
  var Six = (function () {
      function Six() {

      };
      Six.value = new Six();
      return Six;
  })();
  var Seven = (function () {
      function Seven() {

      };
      Seven.value = new Seven();
      return Seven;
  })();
  var Eight = (function () {
      function Eight() {

      };
      Eight.value = new Eight();
      return Eight;
  })();
  var Nine = (function () {
      function Nine() {

      };
      Nine.value = new Nine();
      return Nine;
  })();
  var Ten = (function () {
      function Ten() {

      };
      Ten.value = new Ten();
      return Ten;
  })();
  var Jack = (function () {
      function Jack() {

      };
      Jack.value = new Jack();
      return Jack;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var Card = (function () {
      function Card(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Card.create = function (value0) {
          return function (value1) {
              return new Card(value0, value1);
          };
      };
      return Card;
  })();
  var CardView = (function () {
      function CardView(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CardView.create = function (value0) {
          return function (value1) {
              return new CardView(value0, value1);
          };
      };
      return CardView;
  })();
  var Player = function (x) {
      return x;
  };
  var Gamestate = function (x) {
      return x;
  };
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var mkCardView = function (v) {
      return new CardView(new Card(v.value0, v.value1), v.value1);
  };
  var genericSuit = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Clubs" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Clubs.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Spades" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Spades.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Hearts" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Hearts.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Diamonds" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Diamonds.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Suit", [ {
          sigConstructor: "Game.Clubs", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Spades", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Hearts", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Diamonds", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Clubs) {
          return new Data_Generic.SProd("Game.Clubs", [  ]);
      };
      if (v instanceof Spades) {
          return new Data_Generic.SProd("Game.Spades", [  ]);
      };
      if (v instanceof Hearts) {
          return new Data_Generic.SProd("Game.Hearts", [  ]);
      };
      if (v instanceof Diamonds) {
          return new Data_Generic.SProd("Game.Diamonds", [  ]);
      };
      throw new Error("Failed pattern match at Game line 96, column 1 - line 96, column 44: " + [ v.constructor.name ]);
  });
  var genericFace = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Ace" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Ace.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Two" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Two.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Three" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Three.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Four" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Four.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Five" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Five.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Six" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Six.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Seven" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Seven.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Eight" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Eight.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Nine" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Nine.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Ten" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Ten.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Jack" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Jack.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Queen" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Queen.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.King" && v.value1.length === 0)) {
          return new Data_Maybe.Just(King.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Face", [ {
          sigConstructor: "Game.Ace", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Two", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Three", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Four", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Five", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Six", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Seven", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Eight", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Nine", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Ten", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Jack", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Queen", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.King", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Ace) {
          return new Data_Generic.SProd("Game.Ace", [  ]);
      };
      if (v instanceof Two) {
          return new Data_Generic.SProd("Game.Two", [  ]);
      };
      if (v instanceof Three) {
          return new Data_Generic.SProd("Game.Three", [  ]);
      };
      if (v instanceof Four) {
          return new Data_Generic.SProd("Game.Four", [  ]);
      };
      if (v instanceof Five) {
          return new Data_Generic.SProd("Game.Five", [  ]);
      };
      if (v instanceof Six) {
          return new Data_Generic.SProd("Game.Six", [  ]);
      };
      if (v instanceof Seven) {
          return new Data_Generic.SProd("Game.Seven", [  ]);
      };
      if (v instanceof Eight) {
          return new Data_Generic.SProd("Game.Eight", [  ]);
      };
      if (v instanceof Nine) {
          return new Data_Generic.SProd("Game.Nine", [  ]);
      };
      if (v instanceof Ten) {
          return new Data_Generic.SProd("Game.Ten", [  ]);
      };
      if (v instanceof Jack) {
          return new Data_Generic.SProd("Game.Jack", [  ]);
      };
      if (v instanceof Queen) {
          return new Data_Generic.SProd("Game.Queen", [  ]);
      };
      if (v instanceof King) {
          return new Data_Generic.SProd("Game.King", [  ]);
      };
      throw new Error("Failed pattern match at Game line 76, column 1 - line 76, column 44: " + [ v.constructor.name ]);
  });
  var genericCard = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Card" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Card.create))(Data_Generic.fromSpine(genericFace)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericSuit)(v.value1[1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Card", [ {
          sigConstructor: "Game.Card", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(genericFace)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(genericSuit)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Card", [ function ($dollarq) {
          return Data_Generic.toSpine(genericFace)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(genericSuit)(v.value1);
      } ]);
  });
  var genericCardView = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.CardView" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(CardView.create))(Data_Generic.fromSpine(genericCard)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericSuit)(v.value1[1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.CardView", [ {
          sigConstructor: "Game.CardView", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(genericCard)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(genericSuit)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.CardView", [ function ($dollarq) {
          return Data_Generic.toSpine(genericCard)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(genericSuit)(v.value1);
      } ]);
  });
  var genericPlayer = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Player" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Player))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (ai2) {
                      return function (hand1) {
                          return function (id1) {
                              return function (ipport1) {
                                  return function (name1) {
                                      return function (queue1) {
                                          return function (score1) {
                                              return {
                                                  ai: ai2, 
                                                  hand: hand1, 
                                                  id: id1, 
                                                  ipport: ipport1, 
                                                  name: name1, 
                                                  queue: queue1, 
                                                  score: score1
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCard))((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[6]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Player", [ {
          sigConstructor: "Game.Player", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "ai", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "hand", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCard))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "id", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "ipport", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "name", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "queue", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "score", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Player", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "ai", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.ai);
              }
          }, {
              recLabel: "hand", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCard))(v.hand);
              }
          }, {
              recLabel: "id", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.id);
              }
          }, {
              recLabel: "ipport", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.ipport);
              }
          }, {
              recLabel: "name", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.name);
              }
          }, {
              recLabel: "queue", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.queue);
              }
          }, {
              recLabel: "score", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.score);
              }
          } ]);
      } ]);
  });
  var genericGamestate = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Gamestate" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Gamestate))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (alreadyDrew1) {
                      return function (deck1) {
                          return function (discard1) {
                              return function (done1) {
                                  return function (perCardScore1) {
                                      return function (players1) {
                                          return function (spectators1) {
                                              return {
                                                  alreadyDrew: alreadyDrew1, 
                                                  deck: deck1, 
                                                  discard: discard1, 
                                                  done: done1, 
                                                  perCardScore: perCardScore1, 
                                                  players: players1, 
                                                  spectators: spectators1
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCard))((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCardView))((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericPlayer))((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericPlayer))((r.value0[6]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Gamestate", [ {
          sigConstructor: "Game.Gamestate", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "alreadyDrew", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "deck", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCard))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "discard", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCardView))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "done", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "perCardScore", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "players", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericPlayer))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "spectators", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericPlayer))(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Gamestate", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "alreadyDrew", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.alreadyDrew);
              }
          }, {
              recLabel: "deck", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCard))(v.deck);
              }
          }, {
              recLabel: "discard", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCardView))(v.discard);
              }
          }, {
              recLabel: "done", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.done);
              }
          }, {
              recLabel: "perCardScore", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.perCardScore);
              }
          }, {
              recLabel: "players", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericPlayer))(v.players);
              }
          }, {
              recLabel: "spectators", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericPlayer))(v.spectators);
              }
          } ]);
      } ]);
  });
  var eqSuit = new Data_Eq.Eq(Data_Generic.gEq(genericSuit));
  var eqFace = new Data_Eq.Eq(Data_Generic.gEq(genericFace));
  var eqCard = new Data_Eq.Eq(Data_Generic.gEq(genericCard));
  var ai = function (v) {
      if (v.players instanceof Data_List.Cons && v.discard instanceof Data_List.Cons) {
          var canPlay = function (v1) {
              return function (v2) {
                  if (v2.value0 instanceof Eight) {
                      return true;
                  };
                  return Data_Eq.eq(eqFace)(v2.value0)(v1.value0.value0) || Data_Eq.eq(eqSuit)(v2.value1)(v1.value1);
              };
          };
          var playableCards = Data_List.filter(canPlay(v.discard.value0))(v.players.value0.hand);
          var possiblePlays = Control_Bind.bind(Data_List.bindList)(playableCards)(function (v1) {
              var matchingCards = Data_List.filter(function (v2) {
                  return Data_Eq.eq(eqFace)(v1.value0)(v2.value0);
              })(v.players.value0.hand);
              return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(Data_Semigroup.append(Data_List.semigroupList)(Data_List.difference(eqCard)(matchingCards)(new Data_List.Cons(v1, Data_List.Nil.value)))(new Data_List.Cons(v1, Data_List.Nil.value)));
          });
          if (possiblePlays instanceof Data_List.Cons) {
              return Data_Function.apply(Play.create)(Data_Functor.map(Data_List.functorList)(mkCardView)(possiblePlays.value0));
          };
          if (possiblePlays instanceof Data_List.Nil) {
              return new Play(Data_List.Nil.value);
          };
          throw new Error("Failed pattern match at Game line 381, column 5 - line 383, column 24: " + [ possiblePlays.constructor.name ]);
      };
      return new Play(Data_List.Nil.value);
  };
  exports["Play"] = Play;
  exports["Card"] = Card;
  exports["CardView"] = CardView;
  exports["Ace"] = Ace;
  exports["Two"] = Two;
  exports["Three"] = Three;
  exports["Four"] = Four;
  exports["Five"] = Five;
  exports["Six"] = Six;
  exports["Seven"] = Seven;
  exports["Eight"] = Eight;
  exports["Nine"] = Nine;
  exports["Ten"] = Ten;
  exports["Jack"] = Jack;
  exports["Queen"] = Queen;
  exports["King"] = King;
  exports["Gamestate"] = Gamestate;
  exports["Player"] = Player;
  exports["Clubs"] = Clubs;
  exports["Spades"] = Spades;
  exports["Hearts"] = Hearts;
  exports["Diamonds"] = Diamonds;
  exports["ai"] = ai;
  exports["mkCardView"] = mkCardView;
  exports["genericGamestate"] = genericGamestate;
  exports["genericCardView"] = genericCardView;
  exports["genericPlayer"] = genericPlayer;
  exports["genericFace"] = genericFace;
  exports["eqFace"] = eqFace;
  exports["genericSuit"] = genericSuit;
  exports["eqSuit"] = eqSuit;
  exports["genericCard"] = genericCard;
  exports["eqCard"] = eqCard;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["WS"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Game = PS["Game"];
  var ServerMessage = (function () {
      function ServerMessage(value0) {
          this.value0 = value0;
      };
      ServerMessage.create = function (value0) {
          return new ServerMessage(value0);
      };
      return ServerMessage;
  })();
  exports["ServerMessage"] = ServerMessage;
  exports["connect"] = $foreign.connect;
  exports["getEvent"] = $foreign.getEvent;
  exports["send"] = $foreign.send;
  exports["waitForEvent"] = $foreign.waitForEvent;
})(PS["WS"] = PS["WS"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];        
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.id(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var gEncodeJson$prime = (function () {
      var addField = function (field) {
          return Data_StrMap.insert(field.recLabel)(Data_Function.apply(gEncodeJson$prime)(field.recValue(Data_Unit.unit)));
      };
      return function (v) {
          if (v instanceof Data_Generic.SInt) {
              return Data_Function.apply(Data_Argonaut_Core.fromNumber)(Data_Int.toNumber(v.value0));
          };
          if (v instanceof Data_Generic.SString) {
              return Data_Argonaut_Core.fromString(v.value0);
          };
          if (v instanceof Data_Generic.SChar) {
              return Data_Function.apply(Data_Argonaut_Core.fromString)(Data_String.singleton(v.value0));
          };
          if (v instanceof Data_Generic.SNumber) {
              return Data_Argonaut_Core.fromNumber(v.value0);
          };
          if (v instanceof Data_Generic.SBoolean) {
              return Data_Argonaut_Core.fromBoolean(v.value0);
          };
          if (v instanceof Data_Generic.SArray) {
              return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(function ($38) {
                  return gEncodeJson$prime((function (v1) {
                      return Data_Function.applyFlipped(Data_Unit.unit)(v1);
                  })($38));
              })(v.value0));
          };
          if (v instanceof Data_Generic.SUnit) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Generic.SProd) {
              return Data_Function.apply(Data_Argonaut_Core.fromObject)(Data_Function.apply(Data_StrMap.insert("tag")(encodeJson(encodeJsonJString)(v.value0)))(Data_StrMap.singleton("values")(encodeJson(encodeJsonArray(encodeJsonJson))(Data_Functor.map(Data_Functor.functorArray)(function ($39) {
                  return gEncodeJson$prime((function (v1) {
                      return Data_Function.applyFlipped(Data_Unit.unit)(v1);
                  })($39));
              })(v.value1)))));
          };
          if (v instanceof Data_Generic.SRecord) {
              return Data_Function.apply(Data_Argonaut_Core.fromObject)(Data_Foldable.foldr(Data_Foldable.foldableArray)(addField)(Data_StrMap.empty)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Class line 26, column 16 - line 39, column 48: " + [ v.constructor.name ]);
      };
  })();
  var gEncodeJson = function (dictGeneric) {
      return function ($40) {
          return gEncodeJson$prime(Data_Generic.toSpine(dictGeneric)($40));
      };
  };
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJson"] = encodeJson;
  exports["gEncodeJson"] = gEncodeJson;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var gDecodeJson$prime = function (signature) {
      return function (json) {
          var mFail = function (msg) {
              return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
          };
          if (signature instanceof Data_Generic.SigNumber) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SNumber.create)(mFail("Expected a number")(Data_Argonaut_Core.toNumber(json)));
          };
          if (signature instanceof Data_Generic.SigInt) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SInt.create)(mFail("Expected an integer number")(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromNumber)(Data_Argonaut_Core.toNumber(json))));
          };
          if (signature instanceof Data_Generic.SigString) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SString.create)(mFail("Expected a string")(Data_Argonaut_Core.toString(json)));
          };
          if (signature instanceof Data_Generic.SigChar) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SChar.create)(mFail("Expected a char")(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_String.toChar)(Data_Argonaut_Core.toString(json))));
          };
          if (signature instanceof Data_Generic.SigBoolean) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SBoolean.create)(mFail("Expected a boolean")(Data_Argonaut_Core.toBoolean(json)));
          };
          if (signature instanceof Data_Generic.SigUnit) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Generic.SUnit.value);
          };
          if (signature instanceof Data_Generic.SigArray) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Function.apply(mFail("Expected an array"))(Data_Argonaut_Core.toArray(json)))(function (v) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SArray.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function ($63) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Function["const"])(gDecodeJson$prime(signature.value0(Data_Unit.unit))($63));
                  })(v));
              });
          };
          if (signature instanceof Data_Generic.SigRecord) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Function.apply(mFail("Expected an object"))(Data_Argonaut_Core.toObject(json)))(function (v) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SRecord.create)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(signature.value0)(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail("'" + (v1.recLabel + "' property missing"))(Data_StrMap.lookup(v1.recLabel)(v)))(function (v2) {
                          return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson$prime(v1.recValue(Data_Unit.unit))(v2))(function (v3) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                  recLabel: v1.recLabel, 
                                  recValue: Data_Function["const"](v3)
                              });
                          });
                      });
                  }));
              });
          };
          if (signature instanceof Data_Generic.SigProd) {
              var decodingErr = function (msg) {
                  return "When decoding a " + (signature.value0 + (": " + msg));
              };
              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(json)))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is missing"))(Data_StrMap.lookup("tag")(v)))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is not a string"))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                          var $45 = Data_Foldable.find(Data_Foldable.foldableArray)(function ($64) {
                              return (function (v3) {
                                  return v2 === v3;
                              })((function (v3) {
                                  return v3.sigConstructor;
                              })($64));
                          })(signature.value1);
                          if ($45 instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Left(decodingErr("'" + (v2 + "' isn't a valid constructor")));
                          };
                          if ($45 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'values' array is missing"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray)(Data_StrMap.lookup("values")(v))))(function (v3) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Array.zipWithA(Data_Either.applicativeEither)(function (k) {
                                      return gDecodeJson$prime(k(Data_Unit.unit));
                                  })($45.value0.sigValues)(v3))(function (v4) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd(v2, Data_Functor.map(Data_Functor.functorArray)(Data_Function["const"])(v4)));
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 61, column 5 - line 66, column 41: " + [ $45.constructor.name ]);
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 40, column 31 - line 66, column 41: " + [ signature.constructor.name ]);
      };
  };
  var gDecodeJson = function (dictGeneric) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function ($65) {
          return Data_Maybe.maybe(new Data_Either.Left("fromSpine failed"))(Data_Either.Right.create)(Data_Generic.fromSpine(dictGeneric)($65));
      })(gDecodeJson$prime(Data_Generic.toSignature(dictGeneric)((Type_Proxy["Proxy"]).value)));
  };
  exports["gDecodeJson"] = gDecodeJson;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Client"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Either = PS["Data.Either"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var WS = PS["WS"];
  var Game = PS["Game"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];        
  var Click = (function () {
      function Click() {

      };
      Click.value = new Click();
      return Click;
  })();
  var uiEventLoop = function __do() {
      var v = $foreign.getMouseEvent();
      (function __do() {
          Control_Monad_Eff_Console.log("click!")();
          return Data_Function.apply(WS.send)(Data_Argonaut_Encode_Class.gEncodeJson(Data_Generic.genericString)("click"))();
      })();
      return $foreign.waitForMouseEvent(uiEventLoop)();
  };
  var socketEventLoop = function __do() {
      var v = WS.getEvent();
      (function () {
          if (v instanceof WS.ServerMessage) {
              var $6 = Data_Argonaut_Decode_Class.gDecodeJson(Game.genericGamestate)(v.value0);
              if ($6 instanceof Data_Either.Left) {
                  return Control_Monad_Eff_Console.log($6.value0);
              };
              if ($6 instanceof Data_Either.Right) {
                  return $foreign.display($6.value0);
              };
              throw new Error("Failed pattern match at Client line 43, column 13 - line 45, column 39: " + [ $6.constructor.name ]);
          };
          return Partial_Unsafe.unsafeCrashWith("should never be anything other than a 'ServerMessage' as this is a client.");
      })()();
      return WS.waitForEvent(socketEventLoop)();
  };
  var main = function __do() {
      WS.connect("200.200.200.5")(888)();
      WS.waitForEvent(socketEventLoop)();
      return $foreign.waitForMouseEvent(uiEventLoop)();
  };
  exports["Click"] = Click;
  exports["main"] = main;
  exports["socketEventLoop"] = socketEventLoop;
  exports["uiEventLoop"] = uiEventLoop;
  exports["display"] = $foreign.display;
  exports["getMouseEvent"] = $foreign.getMouseEvent;
  exports["waitForMouseEvent"] = $foreign.waitForMouseEvent;
})(PS["Client"] = PS["Client"] || {});
PS["Client"].main();
