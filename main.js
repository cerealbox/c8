// Generated by psc-bundle 0.9.3
var PS = {};
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  // module Data.Show

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  // module Data.Bounded

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Data.Semiring

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar29) {
                  return $dollar29;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 283, column 1 - line 283, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 68, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Int.floor(asNumber))();
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["sum"] = sum;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 719, column 3 - line 719, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Nil) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 474, column 1 - line 478, column 52: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);                                         
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                  };
                  if (v1 instanceof Cons) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 686, column 1 - line 686, column 23: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 369, column 1 - line 374, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 493, column 1 - line 493, column 15: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Cons) {
                  return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 594, column 1 - line 594, column 23: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match at Data.List line 362, column 1 - line 362, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };                                                                         
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List line 754, column 3 - line 754, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, Data_Function.flip(concatMap));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["concatMap"] = concatMap;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldM"] = foldM;
  exports["length"] = length;
  exports["reverse"] = reverse;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Clubs = (function () {
      function Clubs() {

      };
      Clubs.value = new Clubs();
      return Clubs;
  })();
  var Spades = (function () {
      function Spades() {

      };
      Spades.value = new Spades();
      return Spades;
  })();
  var Hearts = (function () {
      function Hearts() {

      };
      Hearts.value = new Hearts();
      return Hearts;
  })();
  var Diamonds = (function () {
      function Diamonds() {

      };
      Diamonds.value = new Diamonds();
      return Diamonds;
  })();
  var Ace = (function () {
      function Ace() {

      };
      Ace.value = new Ace();
      return Ace;
  })();
  var Two = (function () {
      function Two() {

      };
      Two.value = new Two();
      return Two;
  })();
  var Three = (function () {
      function Three() {

      };
      Three.value = new Three();
      return Three;
  })();
  var Four = (function () {
      function Four() {

      };
      Four.value = new Four();
      return Four;
  })();
  var Five = (function () {
      function Five() {

      };
      Five.value = new Five();
      return Five;
  })();
  var Six = (function () {
      function Six() {

      };
      Six.value = new Six();
      return Six;
  })();
  var Seven = (function () {
      function Seven() {

      };
      Seven.value = new Seven();
      return Seven;
  })();
  var Eight = (function () {
      function Eight() {

      };
      Eight.value = new Eight();
      return Eight;
  })();
  var Nine = (function () {
      function Nine() {

      };
      Nine.value = new Nine();
      return Nine;
  })();
  var Ten = (function () {
      function Ten() {

      };
      Ten.value = new Ten();
      return Ten;
  })();
  var Jack = (function () {
      function Jack() {

      };
      Jack.value = new Jack();
      return Jack;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var Card = (function () {
      function Card(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Card.create = function (value0) {
          return function (value1) {
              return new Card(value0, value1);
          };
      };
      return Card;
  })();
  var CardView = (function () {
      function CardView(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CardView.create = function (value0) {
          return function (value1) {
              return new CardView(value0, value1);
          };
      };
      return CardView;
  })();
  var Gamestate = function (x) {
      return x;
  };
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var NewGame = (function () {
      function NewGame() {

      };
      NewGame.value = new NewGame();
      return NewGame;
  })();
  var AddPlayer = (function () {
      function AddPlayer(value0) {
          this.value0 = value0;
      };
      AddPlayer.create = function (value0) {
          return new AddPlayer(value0);
      };
      return AddPlayer;
  })();
  var toCard = function (v) {
      return v.value0;
  };
  var suitShow = new Data_Show.Show(function (v) {
      if (v instanceof Clubs) {
          return "\u2663";
      };
      if (v instanceof Spades) {
          return "\u2660";
      };
      if (v instanceof Hearts) {
          return "\u2665";
      };
      if (v instanceof Diamonds) {
          return "\u2666";
      };
      throw new Error("Failed pattern match at Game line 133, column 5 - line 134, column 5: " + [ v.constructor.name ]);
  });
  var suitEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof Clubs && v1 instanceof Clubs) {
              return true;
          };
          if (v instanceof Spades && v1 instanceof Spades) {
              return true;
          };
          if (v instanceof Hearts && v1 instanceof Hearts) {
              return true;
          };
          if (v instanceof Diamonds && v1 instanceof Diamonds) {
              return true;
          };
          return false;
      };
  });
  var shuffle = Data_List.foldM(Control_Monad_Eff.monadEff)(function (acc) {
      return function (cur) {
          return function __do() {
              var v = Control_Monad_Eff_Random.randomInt(0)(1)();
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  if (v === 0) {
                      return new Data_List.Cons(cur, acc);
                  };
                  return Data_Semigroup.append(Data_List.semigroupList)(acc)(new Data_List.Cons(cur, Data_List.Nil.value));
              })())();
          };
      };
  })(Data_List.Nil.value);
  var showHand$prime$prime = function (dictShow) {
      return function (v) {
          if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
              return "[" + (Data_Show.show(dictShow)(v.value0) + "]");
          };
          if (v instanceof Data_List.Cons) {
              var showHand$prime = function (v1) {
                  if (v1 instanceof Data_List.Cons && v1.value1 instanceof Data_List.Nil) {
                      return Data_Show.show(dictShow)(v1.value0) + "]";
                  };
                  if (v1 instanceof Data_List.Cons) {
                      return Data_Show.show(dictShow)(v1.value0) + (" " + showHand$prime(v1.value1));
                  };
                  if (v1 instanceof Data_List.Nil) {
                      return "]";
                  };
                  throw new Error("Failed pattern match at Game line 88, column 1 - line 89, column 1: " + [ v1.constructor.name ]);
              };
              return "[" + (Data_Show.show(dictShow)(v.value0) + (" " + showHand$prime(v.value1)));
          };
          if (v instanceof Data_List.Nil) {
              return "[]";
          };
          throw new Error("Failed pattern match at Game line 88, column 1 - line 89, column 1: " + [ v.constructor.name ]);
      };
  };
  var showHand = function (dictShow) {
      return function (x) {
          return Data_Function.apply(showHand$prime$prime(dictShow))(Data_List.reverse(x));
      };
  };
  var mkCardView = function (v) {
      return new CardView(new Card(v.value0, v.value1), v.value1);
  };
  var faceShow = new Data_Show.Show(function (v) {
      if (v instanceof Ace) {
          return "A";
      };
      if (v instanceof Jack) {
          return "J";
      };
      if (v instanceof King) {
          return "K";
      };
      if (v instanceof Queen) {
          return "Q";
      };
      if (v instanceof Two) {
          return "2";
      };
      if (v instanceof Three) {
          return "3";
      };
      if (v instanceof Four) {
          return "4";
      };
      if (v instanceof Five) {
          return "5";
      };
      if (v instanceof Six) {
          return "6";
      };
      if (v instanceof Seven) {
          return "7";
      };
      if (v instanceof Eight) {
          return "8";
      };
      if (v instanceof Nine) {
          return "9";
      };
      if (v instanceof Ten) {
          return "0";
      };
      throw new Error("Failed pattern match at Game line 118, column 5 - line 119, column 5: " + [ v.constructor.name ]);
  });
  var faceEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof Ace && v1 instanceof Ace) {
              return true;
          };
          if (v instanceof Two && v1 instanceof Two) {
              return true;
          };
          if (v instanceof Three && v1 instanceof Three) {
              return true;
          };
          if (v instanceof Four && v1 instanceof Four) {
              return true;
          };
          if (v instanceof Five && v1 instanceof Five) {
              return true;
          };
          if (v instanceof Six && v1 instanceof Six) {
              return true;
          };
          if (v instanceof Seven && v1 instanceof Seven) {
              return true;
          };
          if (v instanceof Eight && v1 instanceof Eight) {
              return true;
          };
          if (v instanceof Nine && v1 instanceof Nine) {
              return true;
          };
          if (v instanceof Ten && v1 instanceof Ten) {
              return true;
          };
          if (v instanceof Jack && v1 instanceof Jack) {
              return true;
          };
          if (v instanceof Queen && v1 instanceof Queen) {
              return true;
          };
          if (v instanceof King && v1 instanceof King) {
              return true;
          };
          return false;
      };
  });
  var reshuffle = function (v) {
      var sameFace = function (face) {
          return function (v1) {
              return Data_Eq.eq(faceEq)(v1.value0.value0)(face);
          };
      };
      if (v.discard instanceof Data_List.Cons) {
          return function __do() {
              var v1 = Data_Function.apply(function ($287) {
                  return shuffle(Data_Functor.map(Data_List.functorList)(toCard)(Data_List.dropWhile(sameFace(v.discard.value0.value0.value0))($287)));
              })(v.discard)();
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  var $83 = {};
                  for (var $84 in v) {
                      if (v.hasOwnProperty($84)) {
                          $83[$84] = v[$84];
                      };
                  };
                  $83.deck = v1;
                  $83.discard = Data_List.takeWhile(sameFace(v.discard.value0.value0.value0))(v.discard);
                  return $83;
              })())();
          };
      };
      if (v.discard instanceof Data_List.Nil) {
          return Partial_Unsafe.unsafeCrashWith("reshuffle called on empty discard pile!");
      };
      throw new Error("Failed pattern match at Game line 156, column 5 - line 164, column 5: " + [ v.discard.constructor.name ]);
  };
  var pickup = function (v) {
      return function (v1) {
          if (v === 0) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v1);
          };
          var activePlayerPickup = function (v2) {
              return function (card) {
                  if (v2 instanceof Data_List.Cons) {
                      return new Data_List.Cons((function () {
                          var $96 = {};
                          for (var $97 in v2.value0) {
                              if (v2.value0.hasOwnProperty($97)) {
                                  $96[$97] = v2.value0[$97];
                              };
                          };
                          $96.hand = new Data_List.Cons(card, v2.value0.hand);
                          return $96;
                      })(), v2.value1);
                  };
                  if (v2 instanceof Data_List.Nil) {
                      return Partial_Unsafe.unsafeCrashWith("no players.");
                  };
                  throw new Error("Failed pattern match at Game line 183, column 9 - line 183, column 93: " + [ v2.constructor.name, card.constructor.name ]);
              };
          };
          if (v1.deck instanceof Data_List.Nil) {
              return function __do() {
                  var v2 = reshuffle(v1)();
                  return pickup(v)(v2)();
              };
          };
          if (v1.deck instanceof Data_List.Cons) {
              return Data_Function.apply(pickup(v - 1))((function () {
                  var $103 = {};
                  for (var $104 in v1) {
                      if (v1.hasOwnProperty($104)) {
                          $103[$104] = v1[$104];
                      };
                  };
                  $103.players = activePlayerPickup(v1.players)(v1.deck.value0);
                  $103.deck = v1.deck.value1;
                  return $103;
              })());
          };
          throw new Error("Failed pattern match at Game line 171, column 5 - line 181, column 18: " + [ v1.deck.constructor.name ]);
      };
  };
  var checkForWinnerAndUpdateScores = function (v) {
      var updateScore = function (score) {
          return function (p) {
              var $109 = {};
              for (var $110 in p) {
                  if (p.hasOwnProperty($110)) {
                      $109[$110] = p[$110];
                  };
              };
              $109.score = p.score + (score * v.perCardScore | 0) | 0;
              return $109;
          };
      };
      if (v.players instanceof Data_List.Cons && (v.players.value0.hand instanceof Data_List.Nil && (v.players.value1 instanceof Data_List.Cons && (v.players.value1.value0.hand instanceof Data_List.Nil && v.players.value1.value1 instanceof Data_List.Nil)))) {
          var $113 = {};
          for (var $114 in v) {
              if (v.hasOwnProperty($114)) {
                  $113[$114] = v[$114];
              };
          };
          $113.done = true;
          $113.perCardScore = v.perCardScore * 2 | 0;
          return $113;
      };
      if (v.players instanceof Data_List.Cons && v.players.value0.hand instanceof Data_List.Nil) {
          var points = Data_Function.apply(Data_Foldable.sum(Data_List.foldableList)(Data_Semiring.semiringInt))(Data_Functor.map(Data_List.functorList)(function (v1) {
              return Data_List.length(v1.hand);
          })(v.players.value1));
          var $124 = {};
          for (var $125 in v) {
              if (v.hasOwnProperty($125)) {
                  $124[$125] = v[$125];
              };
          };
          $124.done = true;
          $124.players = new Data_List.Cons(updateScore(points)(v.players.value0), v.players.value1);
          $124.perCardScore = 1;
          return $124;
      };
      return v;
  };
  var cardShow = new Data_Show.Show(function (v) {
      return Data_Show.show(faceShow)(v.value0) + Data_Show.show(suitShow)(v.value1);
  });
  var cardViewShow = new Data_Show.Show(function (v) {
      return "@" + Data_Show.show(cardShow)(new Card(v.value0.value0, v.value1));
  });
  var gameStateShow = new Data_Show.Show(function (v) {
      if (v.players instanceof Data_List.Cons) {
          var $141 = Data_List.filter(function (v1) {
              return v1.id === 0;
          })(v.players);
          if ($141 instanceof Data_List.Cons) {
              var $143 = Data_List.filter(function (v1) {
                  return v1.id === 1;
              })(v.players);
              if ($143 instanceof Data_List.Cons) {
                  return "--------------------" + ("\n{" + (Data_Show.show(Data_Show.showInt)($141.value0.score) + ("} player0: " + (showHand(cardShow)($141.value0.hand) + ("\nX" + (Data_Show.show(Data_Show.showInt)(v.perCardScore) + (" deck: " + (Data_Show.show(Data_Show.showInt)(Data_List.length(v.deck)) + (" cards\npile: " + (showHand(cardViewShow)(v.discard) + ("\n{" + (Data_Show.show(Data_Show.showInt)($143.value0.score) + ("} player1: " + (showHand(cardShow)($143.value0.hand) + "\n--------------------\n"))))))))))))));
              };
              return Partial_Unsafe.unsafeCrashWith("no player 1.");
          };
          return Partial_Unsafe.unsafeCrashWith("no player 0..");
      };
      return Partial_Unsafe.unsafeCrashWith("no player 0.");
  });
  var showPlay = function (gs) {
      return function (play) {
          if (gs.players instanceof Data_List.Cons) {
              if (play instanceof Play) {
                  return "\n** player " + (Data_Show.show(Data_Show.showInt)(gs.players.value0.id) + ("'s' move: " + Data_Function.apply(showHand(cardShow))(Data_Functor.map(Data_List.functorList)(toCard)(play.value0))));
              };
              return Partial_Unsafe.unsafeCrashWith("this should never happen");
          };
          return Partial_Unsafe.unsafeCrashWith("this should never happen");
      };
  };
  var cardEq = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(faceEq)(v.value0)(v1.value0) && Data_Eq.eq(suitEq)(v.value1)(v1.value1);
      };
  });
  var burn = function (v) {
      return function (v1) {
          if (v instanceof Data_List.Cons && (v.value0.value0 instanceof Queen && v.value0.value1 instanceof Spades)) {
              return pickup(5)(v1);
          };
          if (v instanceof Data_List.Cons && v.value0.value0 instanceof Two) {
              var twos = Data_List.takeWhile(function (v2) {
                  return Data_Eq.eq(faceEq)(v2.value0.value0)(Two.value);
              })(v1.discard);
              return pickup(Data_List.length(twos) * 2 | 0)(v1);
          };
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v1);
      };
  };
  var handlePlay = function (v) {
      return function (playCardViews) {
          var reverseTurn = function (v1) {
              var $190 = {};
              for (var $191 in v1) {
                  if (v1.hasOwnProperty($191)) {
                      $190[$191] = v1[$191];
                  };
              };
              $190.players = Data_List.reverse(v1.players);
              return $190;
          };
          var removeCards = function (p) {
              var $195 = {};
              for (var $196 in p) {
                  if (p.hasOwnProperty($196)) {
                      $195[$196] = p[$196];
                  };
              };
              $195.hand = Data_List.difference(cardEq)(p.hand)(Data_Functor.map(Data_List.functorList)(toCard)(playCardViews));
              return $195;
          };
          var playHand = function (v1) {
              if (v1.players instanceof Data_List.Cons) {
                  var $199 = {};
                  for (var $200 in v1) {
                      if (v1.hasOwnProperty($200)) {
                          $199[$200] = v1[$200];
                      };
                  };
                  $199.discard = Data_Semigroup.append(Data_List.semigroupList)(playCardViews)(v1.discard);
                  $199.alreadyDrew = false;
                  $199.players = new Data_List.Cons(removeCards(v1.players.value0), v1.players.value1);
                  return $199;
              };
              if (v1.players instanceof Data_List.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("no players.");
              };
              throw new Error("Failed pattern match at Game line 219, column 1 - line 244, column 1: " + [ v1.constructor.name ]);
          };
          var nextTurn = function (v1) {
              if (v1.players instanceof Data_List.Cons) {
                  var $207 = {};
                  for (var $208 in v1) {
                      if (v1.hasOwnProperty($208)) {
                          $207[$208] = v1[$208];
                      };
                  };
                  $207.players = Data_Semigroup.append(Data_List.semigroupList)(v1.players.value1)(new Data_List.Cons(v1.players.value0, Data_List.Nil.value));
                  return $207;
              };
              if (v1.players instanceof Data_List.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("no players.");
              };
              throw new Error("Failed pattern match at Game line 219, column 1 - line 244, column 1: " + [ v1.constructor.name ]);
          };
          var play = Data_Functor.map(Data_List.functorList)(toCard)(playCardViews);
          if (play instanceof Data_List.Nil) {
              if (v.alreadyDrew) {
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)((function () {
                      var $216 = {};
                      for (var $217 in v) {
                          if (v.hasOwnProperty($217)) {
                              $216[$217] = v[$217];
                          };
                      };
                      $216.alreadyDrew = false;
                      return $216;
                  })())));
              };
              if (!v.alreadyDrew) {
                  return Data_Function.apply(pickup(1))((function () {
                      var $219 = {};
                      for (var $220 in v) {
                          if (v.hasOwnProperty($220)) {
                              $219[$220] = v[$220];
                          };
                      };
                      $219.alreadyDrew = true;
                      return $219;
                  })());
              };
              throw new Error("Failed pattern match at Game line 223, column 13 - line 225, column 71: " + [ v.alreadyDrew.constructor.name ]);
          };
          if (play instanceof Data_List.Cons && play.value0.value0 instanceof Jack) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(Data_Function.apply(nextTurn)(playHand(v)))));
          };
          if (play instanceof Data_List.Cons && play.value0.value0 instanceof Ace) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(reverseTurn)(playHand(v))));
          };
          return Data_Function.apply(burn(play))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(playHand(v))));
      };
  };
  var allCards = Control_Bind.bind(Data_List.bindList)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_List.Cons.create)(Data_List.Nil.value)([ Clubs.value, Spades.value, Hearts.value, Diamonds.value ]))(function (v) {
      return Control_Bind.bind(Data_List.bindList)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_List.Cons.create)(Data_List.Nil.value)([ Ace.value, Two.value, Three.value, Four.value, Five.value, Six.value, Seven.value, Eight.value, Nine.value, Ten.value, Jack.value, Queen.value, King.value ]))(function (v1) {
          return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(new Card(v1, v));
      });
  });
  var update = function (v) {
      return function (v1) {
          if (v1 instanceof Play) {
              return function __do() {
                  var v2 = handlePlay(v)(v1.value0)();
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(checkForWinnerAndUpdateScores(v2))();
              };
          };
          if (v1 instanceof NewGame) {
              return function __do() {
                  var v2 = shuffle(allCards)();
                  if (v2 instanceof Data_List.Cons) {
                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Foldable.foldr(Data_List.foldableList)(function (v3) {
                          return function (v4) {
                              var $243 = {};
                              for (var $244 in v4) {
                                  if (v4.hasOwnProperty($244)) {
                                      $243[$244] = v4[$244];
                                  };
                              };
                              $243.players = new Data_List.Cons((function () {
                                  var $240 = {};
                                  for (var $241 in v3) {
                                      if (v3.hasOwnProperty($241)) {
                                          $240[$241] = v3[$241];
                                      };
                                  };
                                  $240.hand = Data_List.take(8)(v4.deck);
                                  return $240;
                              })(), v4.players);
                              $243.deck = Data_List.drop(8)(v4.deck);
                              return $243;
                          };
                      })((function () {
                          var $248 = {};
                          for (var $249 in v) {
                              if (v.hasOwnProperty($249)) {
                                  $248[$249] = v[$249];
                              };
                          };
                          $248.players = Data_List.Nil.value;
                          $248.deck = v2.value1;
                          $248.discard = new Data_List.Cons(new CardView(v2.value0, v2.value0.value1), Data_List.Nil.value);
                          $248.done = false;
                          return $248;
                      })())(v.players)))();
                  };
                  return Partial_Unsafe.unsafeCrashWith("failed to initialize cards.")();
              };
          };
          if (v1 instanceof AddPlayer) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  var $255 = {};
                  for (var $256 in v) {
                      if (v.hasOwnProperty($256)) {
                          $255[$256] = v[$256];
                      };
                  };
                  $255.players = new Data_List.Cons({
                      hand: Data_List.Nil.value, 
                      score: 0, 
                      name: v1.value0, 
                      id: Data_List.length(v.players)
                  }, v.players);
                  return $255;
              })());
          };
          throw new Error("Failed pattern match at Game line 245, column 1 - line 247, column 52: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var ai = function (v) {
      if (v.players instanceof Data_List.Cons && v.discard instanceof Data_List.Cons) {
          var canPlay = function (v1) {
              return function (v2) {
                  if (v2.value0 instanceof Eight) {
                      return true;
                  };
                  return Data_Eq.eq(faceEq)(v2.value0)(v1.value0.value0) || Data_Eq.eq(suitEq)(v2.value1)(v1.value1);
              };
          };
          var playableCards = Data_List.filter(canPlay(v.discard.value0))(v.players.value0.hand);
          var possiblePlays = Control_Bind.bind(Data_List.bindList)(playableCards)(function (v1) {
              var matchingCards = Data_List.filter(function (v2) {
                  return Data_Eq.eq(faceEq)(v1.value0)(v2.value0);
              })(v.players.value0.hand);
              return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(Data_Semigroup.append(Data_List.semigroupList)(Data_List.difference(cardEq)(matchingCards)(new Data_List.Cons(v1, Data_List.Nil.value)))(new Data_List.Cons(v1, Data_List.Nil.value)));
          });
          if (possiblePlays instanceof Data_List.Cons) {
              return Data_Function.apply(Play.create)(Data_Functor.map(Data_List.functorList)(mkCardView)(possiblePlays.value0));
          };
          if (possiblePlays instanceof Data_List.Nil) {
              return new Play(Data_List.Nil.value);
          };
          throw new Error("Failed pattern match at Game line 281, column 5 - line 283, column 24: " + [ possiblePlays.constructor.name ]);
      };
      return new Play(Data_List.Nil.value);
  };
  exports["Play"] = Play;
  exports["NewGame"] = NewGame;
  exports["AddPlayer"] = AddPlayer;
  exports["Card"] = Card;
  exports["CardView"] = CardView;
  exports["Ace"] = Ace;
  exports["Two"] = Two;
  exports["Three"] = Three;
  exports["Four"] = Four;
  exports["Five"] = Five;
  exports["Six"] = Six;
  exports["Seven"] = Seven;
  exports["Eight"] = Eight;
  exports["Nine"] = Nine;
  exports["Ten"] = Ten;
  exports["Jack"] = Jack;
  exports["Queen"] = Queen;
  exports["King"] = King;
  exports["Gamestate"] = Gamestate;
  exports["Clubs"] = Clubs;
  exports["Spades"] = Spades;
  exports["Hearts"] = Hearts;
  exports["Diamonds"] = Diamonds;
  exports["ai"] = ai;
  exports["allCards"] = allCards;
  exports["burn"] = burn;
  exports["checkForWinnerAndUpdateScores"] = checkForWinnerAndUpdateScores;
  exports["handlePlay"] = handlePlay;
  exports["mkCardView"] = mkCardView;
  exports["pickup"] = pickup;
  exports["reshuffle"] = reshuffle;
  exports["showHand"] = showHand;
  exports["showPlay"] = showPlay;
  exports["shuffle"] = shuffle;
  exports["toCard"] = toCard;
  exports["update"] = update;
  exports["faceEq"] = faceEq;
  exports["suitEq"] = suitEq;
  exports["cardEq"] = cardEq;
  exports["gameStateShow"] = gameStateShow;
  exports["cardViewShow"] = cardViewShow;
  exports["cardShow"] = cardShow;
  exports["faceShow"] = faceShow;
  exports["suitShow"] = suitShow;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {                 

  exports.display = function(gs) {
	  if (typeof document != 'undefined')
		  displayo(gs)
  }

  exports.timeout = function(milli) {
      return function(f) {
          return function() {
              setTimeout(f, milli)
          }
      }
  }

  exports.click = function(f) {
	  if (typeof document == 'undefined') return function() { setTimeout(f, 1000) }

	  return function() {
		  window.onmouseup = f
	  }
  }
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Main"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Boolean = PS["Data.Boolean"];
  var Game = PS["Game"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];        
  var gameLoop = function (v) {
      if (v.done) {
          return function __do() {
              Control_Monad_Eff_Console.log(" -++- new game -++- ")();
              var v1 = Game.update(v)(Game.NewGame.value)();
              Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Game.gameStateShow)(v1))();
              var __ = $foreign.display(v1);
              return Data_Function.apply($foreign.timeout(2000))(gameLoop(v1))();
          };
      };
      return function __do() {
          Data_Function.apply(Control_Monad_Eff_Console.log)(Game.showPlay(v)(Game.ai(v)))();
          var v1 = Data_Function.apply(Game.update(v))(Game.ai(v))();
          Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Game.gameStateShow)(v1))();
          var __ = $foreign.display(v1);
          return Data_Function.apply($foreign.timeout(1000))(gameLoop(v1))();
      };
  };
  var emptyGameState = {
      players: Data_List.Nil.value, 
      deck: Data_List.Nil.value, 
      discard: Data_List.Nil.value, 
      perCardScore: 1, 
      alreadyDrew: false, 
      done: true
  };
  var main = function __do() {
      var v = Data_Function.apply(Game.update(emptyGameState))(new Game.AddPlayer("erik"))();
      var v1 = Data_Function.apply(Game.update(v))(new Game.AddPlayer("jafar"))();
      return gameLoop(v1)();
  };
  exports["emptyGameState"] = emptyGameState;
  exports["gameLoop"] = gameLoop;
  exports["main"] = main;
  exports["click"] = $foreign.click;
  exports["display"] = $foreign.display;
  exports["timeout"] = $foreign.timeout;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
