// Generated by psc-bundle 0.9.3
var PS = {};
(function(exports) {
    "use strict";

  // module Data.Functor

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  // module Data.Show

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  // module Data.Bounded

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Data.Semiring

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar29) {
                  return $dollar29;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 283, column 1 - line 283, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 78, column 3 - line 78, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 68, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Int.floor(asNumber))();
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["sum"] = sum;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $49 = comp(x)(y);
                  if ($49 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($49 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($49 instanceof Data_Ordering.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 436, column 15 - line 441, column 1: " + [ $49.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  exports["null"] = $$null;
  exports["sortBy"] = sortBy;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };

  exports.zipCompare = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var o = f(xs[i])(ys[i]);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var orderingToInt = function (v) {
      if (v instanceof Data_Ordering.EQ) {
          return 0;
      };
      if (v instanceof Data_Ordering.LT) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return -1;
      };
      throw new Error("Failed pattern match at Data.Generic line 427, column 17 - line 430, column 10: " + [ v.constructor.name ]);
  }; 
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create); 
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 356, column 7 - line 356, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return Data_Function.apply(showParen(v > 10))(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 350, column 1 - line 358, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($239) {
          return genericShowPrec(0)(toSpine(dictGeneric)($239));
      };
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var compareThunk = function (dictOrd) {
      return function (x) {
          return function (y) {
              return Data_Function.apply(orderingToInt)(Data_Ord.compare(dictOrd)(force(x))(force(y)));
          };
      };
  };
  var ordGenericSpine = new Data_Ord.Ord(function () {
      return eqGenericSpine;
  }, function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              var $199 = Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
              if ($199 instanceof Data_Ordering.EQ) {
                  return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value1)(v1.value1));
              };
              return $199;
          };
          if (v instanceof SProd) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SProd) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      var $208 = Data_Ord.compare(Data_Ord.ordString)(x.recLabel)(y.recLabel);
                      if ($208 instanceof Data_Ordering.EQ) {
                          return Data_Function.apply(orderingToInt)(Data_Ord.compare(ordGenericSpine)(force(x.recValue))(force(y.recValue)));
                      };
                      return orderingToInt($208);
                  };
              };
              return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(go)(v.value0)(v1.value0));
          };
          if (v instanceof SRecord) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SRecord) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return Data_Ord.compare(Data_Ord.ordInt)(v.value0)(v1.value0);
          };
          if (v instanceof SInt) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SInt) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return Data_Ord.compare(Data_Ord.ordBoolean)(v.value0)(v1.value0);
          };
          if (v instanceof SBoolean) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SBoolean) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return Data_Ord.compare(Data_Ord.ordNumber)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SNumber) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof SString) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SString) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return Data_Ord.compare(Data_Ord.ordChar)(v.value0)(v1.value0);
          };
          if (v instanceof SChar) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SChar) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value0)(v1.value0));
          };
          if (v instanceof SArray) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SArray) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Generic line 194, column 3 - line 197, column 15: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var gCompare = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Ord.compare(ordGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gCompare"] = gCompare;
  exports["gEq"] = gEq;
  exports["gShow"] = gShow;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericBool"] = genericBool;
  exports["eqGenericSpine"] = eqGenericSpine;
  exports["ordGenericSpine"] = ordGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 456, column 3 - line 458, column 40: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a, as);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(Data_Function.apply(as)(singleton(a)), sequences(v));
              };
          };
      };
      return function ($385) {
          return mergeAll(sequences($385));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 719, column 3 - line 719, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Nil) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 474, column 1 - line 478, column 52: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var genericList = function (dictGeneric) {
      return new Data_Generic.Generic(function (v) {
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Nil" && v.value1.length === 0)) {
              return new Data_Maybe.Just(Nil.value);
          };
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Cons" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Cons.create))(Data_Generic.fromSpine(dictGeneric)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericList(dictGeneric))(v.value1[1](Data_Unit.unit)));
          };
          return Data_Maybe.Nothing.value;
      }, function ($dollarq) {
          return new Data_Generic.SigProd("Data.List.List", [ {
              sigConstructor: "Data.List.Nil", 
              sigValues: [  ]
          }, {
              sigConstructor: "Data.List.Cons", 
              sigValues: [ function ($dollarq1) {
                  return Data_Generic.toSignature(dictGeneric)(Data_Generic.anyProxy);
              }, function ($dollarq1) {
                  return Data_Generic.toSignature(genericList(dictGeneric))(Data_Generic.anyProxy);
              } ]
          } ]);
      }, function (v) {
          if (v instanceof Nil) {
              return new Data_Generic.SProd("Data.List.Nil", [  ]);
          };
          if (v instanceof Cons) {
              return new Data_Generic.SProd("Data.List.Cons", [ function ($dollarq) {
                  return Data_Generic.toSpine(dictGeneric)(v.value0);
              }, function ($dollarq) {
                  return Data_Generic.toSpine(genericList(dictGeneric))(v.value1);
              } ]);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);                                         
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                  };
                  if (v1 instanceof Cons) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 686, column 1 - line 686, column 23: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 369, column 1 - line 374, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 493, column 1 - line 493, column 15: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Cons) {
                  return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 594, column 1 - line 594, column 23: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match at Data.List line 362, column 1 - line 362, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };                                                                         
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List line 754, column 3 - line 754, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, Data_Function.flip(concatMap));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["concatMap"] = concatMap;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldM"] = foldM;
  exports["length"] = length;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["genericList"] = genericList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Clubs = (function () {
      function Clubs() {

      };
      Clubs.value = new Clubs();
      return Clubs;
  })();
  var Spades = (function () {
      function Spades() {

      };
      Spades.value = new Spades();
      return Spades;
  })();
  var Hearts = (function () {
      function Hearts() {

      };
      Hearts.value = new Hearts();
      return Hearts;
  })();
  var Diamonds = (function () {
      function Diamonds() {

      };
      Diamonds.value = new Diamonds();
      return Diamonds;
  })();
  var Ace = (function () {
      function Ace() {

      };
      Ace.value = new Ace();
      return Ace;
  })();
  var Two = (function () {
      function Two() {

      };
      Two.value = new Two();
      return Two;
  })();
  var Three = (function () {
      function Three() {

      };
      Three.value = new Three();
      return Three;
  })();
  var Four = (function () {
      function Four() {

      };
      Four.value = new Four();
      return Four;
  })();
  var Five = (function () {
      function Five() {

      };
      Five.value = new Five();
      return Five;
  })();
  var Six = (function () {
      function Six() {

      };
      Six.value = new Six();
      return Six;
  })();
  var Seven = (function () {
      function Seven() {

      };
      Seven.value = new Seven();
      return Seven;
  })();
  var Eight = (function () {
      function Eight() {

      };
      Eight.value = new Eight();
      return Eight;
  })();
  var Nine = (function () {
      function Nine() {

      };
      Nine.value = new Nine();
      return Nine;
  })();
  var Ten = (function () {
      function Ten() {

      };
      Ten.value = new Ten();
      return Ten;
  })();
  var Jack = (function () {
      function Jack() {

      };
      Jack.value = new Jack();
      return Jack;
  })();
  var Queen = (function () {
      function Queen() {

      };
      Queen.value = new Queen();
      return Queen;
  })();
  var King = (function () {
      function King() {

      };
      King.value = new King();
      return King;
  })();
  var Card = (function () {
      function Card(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Card.create = function (value0) {
          return function (value1) {
              return new Card(value0, value1);
          };
      };
      return Card;
  })();
  var CardView = (function () {
      function CardView(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CardView.create = function (value0) {
          return function (value1) {
              return new CardView(value0, value1);
          };
      };
      return CardView;
  })();
  var Player = function (x) {
      return x;
  };
  var Gamestate = function (x) {
      return x;
  };
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var NewGame = (function () {
      function NewGame() {

      };
      NewGame.value = new NewGame();
      return NewGame;
  })();
  var AddPlayer = (function () {
      function AddPlayer(value0) {
          this.value0 = value0;
      };
      AddPlayer.create = function (value0) {
          return new AddPlayer(value0);
      };
      return AddPlayer;
  })();
  var RemovePlayer = (function () {
      function RemovePlayer(value0) {
          this.value0 = value0;
      };
      RemovePlayer.create = function (value0) {
          return new RemovePlayer(value0);
      };
      return RemovePlayer;
  })();
  var toCard = function (v) {
      return v.value0;
  };
  var suitShow = new Data_Show.Show(function (v) {
      if (v instanceof Clubs) {
          return "\u2663";
      };
      if (v instanceof Spades) {
          return "\u2660";
      };
      if (v instanceof Hearts) {
          return "\u2665";
      };
      if (v instanceof Diamonds) {
          return "\u2666";
      };
      throw new Error("Failed pattern match at Game line 181, column 5 - line 182, column 5: " + [ v.constructor.name ]);
  });
  var shuffle = Data_List.foldM(Control_Monad_Eff.monadEff)(function (acc) {
      return function (cur) {
          return function __do() {
              var v = Control_Monad_Eff_Random.randomInt(0)(1)();
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  if (v === 0) {
                      return new Data_List.Cons(cur, acc);
                  };
                  return Data_Semigroup.append(Data_List.semigroupList)(acc)(new Data_List.Cons(cur, Data_List.Nil.value));
              })())();
          };
      };
  })(Data_List.Nil.value);
  var showHand$prime$prime = function (dictShow) {
      return function (v) {
          if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
              return "[" + (Data_Show.show(dictShow)(v.value0) + "]");
          };
          if (v instanceof Data_List.Cons) {
              var showHand$prime = function (v1) {
                  if (v1 instanceof Data_List.Cons && v1.value1 instanceof Data_List.Nil) {
                      return Data_Show.show(dictShow)(v1.value0) + "]";
                  };
                  if (v1 instanceof Data_List.Cons) {
                      return Data_Show.show(dictShow)(v1.value0) + (" " + showHand$prime(v1.value1));
                  };
                  if (v1 instanceof Data_List.Nil) {
                      return "]";
                  };
                  throw new Error("Failed pattern match at Game line 136, column 1 - line 137, column 1: " + [ v1.constructor.name ]);
              };
              return "[" + (Data_Show.show(dictShow)(v.value0) + (" " + showHand$prime(v.value1)));
          };
          if (v instanceof Data_List.Nil) {
              return "[]";
          };
          throw new Error("Failed pattern match at Game line 136, column 1 - line 137, column 1: " + [ v.constructor.name ]);
      };
  };
  var showHand = function (dictShow) {
      return function (x) {
          return Data_Function.apply(showHand$prime$prime(dictShow))(Data_List.reverse(x));
      };
  }; 
  var pipe = function (a) {
      return function (b) {
          return b(a);
      };
  };
  var mkCardView = function (v) {
      return new CardView(new Card(v.value0, v.value1), v.value1);
  };
  var genericSuit = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Clubs" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Clubs.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Spades" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Spades.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Hearts" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Hearts.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Diamonds" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Diamonds.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Suit", [ {
          sigConstructor: "Game.Clubs", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Spades", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Hearts", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Diamonds", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Clubs) {
          return new Data_Generic.SProd("Game.Clubs", [  ]);
      };
      if (v instanceof Spades) {
          return new Data_Generic.SProd("Game.Spades", [  ]);
      };
      if (v instanceof Hearts) {
          return new Data_Generic.SProd("Game.Hearts", [  ]);
      };
      if (v instanceof Diamonds) {
          return new Data_Generic.SProd("Game.Diamonds", [  ]);
      };
      throw new Error("Failed pattern match at Game line 96, column 1 - line 96, column 44: " + [ v.constructor.name ]);
  });
  var genericFace = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Ace" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Ace.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Two" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Two.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Three" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Three.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Four" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Four.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Five" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Five.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Six" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Six.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Seven" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Seven.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Eight" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Eight.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Nine" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Nine.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Ten" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Ten.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Jack" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Jack.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Queen" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Queen.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.King" && v.value1.length === 0)) {
          return new Data_Maybe.Just(King.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Face", [ {
          sigConstructor: "Game.Ace", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Two", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Three", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Four", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Five", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Six", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Seven", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Eight", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Nine", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Ten", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Jack", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.Queen", 
          sigValues: [  ]
      }, {
          sigConstructor: "Game.King", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Ace) {
          return new Data_Generic.SProd("Game.Ace", [  ]);
      };
      if (v instanceof Two) {
          return new Data_Generic.SProd("Game.Two", [  ]);
      };
      if (v instanceof Three) {
          return new Data_Generic.SProd("Game.Three", [  ]);
      };
      if (v instanceof Four) {
          return new Data_Generic.SProd("Game.Four", [  ]);
      };
      if (v instanceof Five) {
          return new Data_Generic.SProd("Game.Five", [  ]);
      };
      if (v instanceof Six) {
          return new Data_Generic.SProd("Game.Six", [  ]);
      };
      if (v instanceof Seven) {
          return new Data_Generic.SProd("Game.Seven", [  ]);
      };
      if (v instanceof Eight) {
          return new Data_Generic.SProd("Game.Eight", [  ]);
      };
      if (v instanceof Nine) {
          return new Data_Generic.SProd("Game.Nine", [  ]);
      };
      if (v instanceof Ten) {
          return new Data_Generic.SProd("Game.Ten", [  ]);
      };
      if (v instanceof Jack) {
          return new Data_Generic.SProd("Game.Jack", [  ]);
      };
      if (v instanceof Queen) {
          return new Data_Generic.SProd("Game.Queen", [  ]);
      };
      if (v instanceof King) {
          return new Data_Generic.SProd("Game.King", [  ]);
      };
      throw new Error("Failed pattern match at Game line 76, column 1 - line 76, column 44: " + [ v.constructor.name ]);
  });
  var genericCard = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Card" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Card.create))(Data_Generic.fromSpine(genericFace)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericSuit)(v.value1[1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Card", [ {
          sigConstructor: "Game.Card", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(genericFace)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(genericSuit)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Card", [ function ($dollarq) {
          return Data_Generic.toSpine(genericFace)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(genericSuit)(v.value1);
      } ]);
  });
  var genericCardView = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.CardView" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(CardView.create))(Data_Generic.fromSpine(genericCard)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericSuit)(v.value1[1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.CardView", [ {
          sigConstructor: "Game.CardView", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(genericCard)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(genericSuit)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.CardView", [ function ($dollarq) {
          return Data_Generic.toSpine(genericCard)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(genericSuit)(v.value1);
      } ]);
  });
  var genericPlayer = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Player" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Player))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (ai2) {
                      return function (hand1) {
                          return function (id1) {
                              return function (ipport1) {
                                  return function (name1) {
                                      return function (queue1) {
                                          return function (score1) {
                                              return {
                                                  ai: ai2, 
                                                  hand: hand1, 
                                                  id: id1, 
                                                  ipport: ipport1, 
                                                  name: name1, 
                                                  queue: queue1, 
                                                  score: score1
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCard))((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[6]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Player", [ {
          sigConstructor: "Game.Player", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "ai", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "hand", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCard))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "id", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "ipport", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "name", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "queue", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "score", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Player", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "ai", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.ai);
              }
          }, {
              recLabel: "hand", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCard))(v.hand);
              }
          }, {
              recLabel: "id", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.id);
              }
          }, {
              recLabel: "ipport", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.ipport);
              }
          }, {
              recLabel: "name", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.name);
              }
          }, {
              recLabel: "queue", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.queue);
              }
          }, {
              recLabel: "score", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.score);
              }
          } ]);
      } ]);
  });
  var genericGamestate = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Gamestate" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Gamestate))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (alreadyDrew1) {
                      return function (deck1) {
                          return function (discard1) {
                              return function (done1) {
                                  return function (perCardScore1) {
                                      return function (players1) {
                                          return function (spectators1) {
                                              return {
                                                  alreadyDrew: alreadyDrew1, 
                                                  deck: deck1, 
                                                  discard: discard1, 
                                                  done: done1, 
                                                  perCardScore: perCardScore1, 
                                                  players: players1, 
                                                  spectators: spectators1
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCard))((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericCardView))((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericPlayer))((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_List.genericList(genericPlayer))((r.value0[6]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Gamestate", [ {
          sigConstructor: "Game.Gamestate", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "alreadyDrew", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "deck", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCard))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "discard", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericCardView))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "done", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "perCardScore", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "players", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericPlayer))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "spectators", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_List.genericList(genericPlayer))(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Gamestate", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "alreadyDrew", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.alreadyDrew);
              }
          }, {
              recLabel: "deck", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCard))(v.deck);
              }
          }, {
              recLabel: "discard", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericCardView))(v.discard);
              }
          }, {
              recLabel: "done", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.done);
              }
          }, {
              recLabel: "perCardScore", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.perCardScore);
              }
          }, {
              recLabel: "players", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericPlayer))(v.players);
              }
          }, {
              recLabel: "spectators", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_List.genericList(genericPlayer))(v.spectators);
              }
          } ]);
      } ]);
  });
  var faceShow = new Data_Show.Show(function (v) {
      if (v instanceof Ace) {
          return "A";
      };
      if (v instanceof Jack) {
          return "J";
      };
      if (v instanceof King) {
          return "K";
      };
      if (v instanceof Queen) {
          return "Q";
      };
      if (v instanceof Two) {
          return "2";
      };
      if (v instanceof Three) {
          return "3";
      };
      if (v instanceof Four) {
          return "4";
      };
      if (v instanceof Five) {
          return "5";
      };
      if (v instanceof Six) {
          return "6";
      };
      if (v instanceof Seven) {
          return "7";
      };
      if (v instanceof Eight) {
          return "8";
      };
      if (v instanceof Nine) {
          return "9";
      };
      if (v instanceof Ten) {
          return "0";
      };
      throw new Error("Failed pattern match at Game line 166, column 5 - line 167, column 5: " + [ v.constructor.name ]);
  });
  var eqSuit = new Data_Eq.Eq(Data_Generic.gEq(genericSuit));
  var ordSuit = new Data_Ord.Ord(function () {
      return eqSuit;
  }, Data_Generic.gCompare(genericSuit));
  var eqPlayer = new Data_Eq.Eq(Data_Generic.gEq(genericPlayer));
  var ordPlayer = new Data_Ord.Ord(function () {
      return eqPlayer;
  }, function (v) {
      return function (v1) {
          if (v.ai && !v1.ai) {
              return Data_Ordering.LT.value;
          };
          if (!v.ai && v1.ai) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Ord.ordInt)(v.score)(v1.score);
      };
  });
  var eqFace = new Data_Eq.Eq(Data_Generic.gEq(genericFace));
  var ordFace = new Data_Ord.Ord(function () {
      return eqFace;
  }, Data_Generic.gCompare(genericFace));
  var reshuffle = function (v) {
      var sameFace = function (face) {
          return function (v1) {
              return Data_Eq.eq(eqFace)(v1.value0.value0)(face);
          };
      };
      if (v.discard instanceof Data_List.Cons) {
          return function __do() {
              var v1 = Data_Function.apply(function ($439) {
                  return shuffle(Data_Functor.map(Data_List.functorList)(toCard)(Data_List.dropWhile(sameFace(v.discard.value0.value0.value0))($439)));
              })(v.discard)();
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  var $201 = {};
                  for (var $202 in v) {
                      if (v.hasOwnProperty($202)) {
                          $201[$202] = v[$202];
                      };
                  };
                  $201.deck = v1;
                  $201.discard = Data_List.takeWhile(sameFace(v.discard.value0.value0.value0))(v.discard);
                  return $201;
              })())();
          };
      };
      if (v.discard instanceof Data_List.Nil) {
          return Partial_Unsafe.unsafeCrashWith("reshuffle called on empty discard pile!");
      };
      throw new Error("Failed pattern match at Game line 204, column 5 - line 212, column 5: " + [ v.discard.constructor.name ]);
  };
  var pickup = function (v) {
      return function (v1) {
          if (v === 0) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v1);
          };
          var activePlayerPickup = function (v2) {
              return function (card) {
                  if (v2 instanceof Data_List.Cons) {
                      return new Data_List.Cons((function () {
                          var $214 = {};
                          for (var $215 in v2.value0) {
                              if (v2.value0.hasOwnProperty($215)) {
                                  $214[$215] = v2.value0[$215];
                              };
                          };
                          $214.hand = new Data_List.Cons(card, v2.value0.hand);
                          return $214;
                      })(), v2.value1);
                  };
                  if (v2 instanceof Data_List.Nil) {
                      return Partial_Unsafe.unsafeCrashWith("no players.");
                  };
                  throw new Error("Failed pattern match at Game line 231, column 9 - line 231, column 93: " + [ v2.constructor.name, card.constructor.name ]);
              };
          };
          if (v1.deck instanceof Data_List.Nil) {
              return function __do() {
                  var v2 = reshuffle(v1)();
                  return pickup(v)(v2)();
              };
          };
          if (v1.deck instanceof Data_List.Cons) {
              return Data_Function.apply(pickup(v - 1))((function () {
                  var $221 = {};
                  for (var $222 in v1) {
                      if (v1.hasOwnProperty($222)) {
                          $221[$222] = v1[$222];
                      };
                  };
                  $221.players = activePlayerPickup(v1.players)(v1.deck.value0);
                  $221.deck = v1.deck.value1;
                  return $221;
              })());
          };
          throw new Error("Failed pattern match at Game line 219, column 5 - line 229, column 18: " + [ v1.deck.constructor.name ]);
      };
  };
  var eqCard = new Data_Eq.Eq(Data_Generic.gEq(genericCard));
  var ordCard = new Data_Ord.Ord(function () {
      return eqCard;
  }, function (v) {
      return function (v1) {
          var $228 = Data_Ord.compare(ordFace)(v.value0)(v1.value0);
          if ($228 instanceof Data_Ordering.EQ) {
              return Data_Ord.compare(ordSuit)(v.value1)(v1.value1);
          };
          if ($228 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if ($228 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Game line 71, column 41 - line 74, column 17: " + [ $228.constructor.name ]);
      };
  });
  var emptyGameState = {
      players: Data_List.Nil.value, 
      spectators: Data_List.Nil.value, 
      deck: Data_List.Nil.value, 
      discard: Data_List.Nil.value, 
      perCardScore: 1, 
      alreadyDrew: false, 
      done: true
  };
  var checkForWinnerAndUpdateScores = function (v) {
      var updateScore = function (score) {
          return function (p) {
              var $234 = {};
              for (var $235 in p) {
                  if (p.hasOwnProperty($235)) {
                      $234[$235] = p[$235];
                  };
              };
              $234.score = p.score + (score * v.perCardScore | 0) | 0;
              return $234;
          };
      };
      if (v.players instanceof Data_List.Cons && v.players.value0.hand instanceof Data_List.Nil) {
          var points = Data_Function.apply(Data_Foldable.sum(Data_List.foldableList)(Data_Semiring.semiringInt))(Data_Functor.map(Data_List.functorList)(function (v1) {
              return Data_List.length(v1.hand);
          })(v.players.value1));
          var $241 = {};
          for (var $242 in v) {
              if (v.hasOwnProperty($242)) {
                  $241[$242] = v[$242];
              };
          };
          $241.done = true;
          $241.players = new Data_List.Cons(updateScore(points)(v.players.value0), v.players.value1);
          $241.perCardScore = (function () {
              if (points === 0) {
                  return v.perCardScore * 2 | 0;
              };
              return 1;
          })();
          return $241;
      };
      return v;
  };
  var cardShow = new Data_Show.Show(function (v) {
      return Data_Show.show(faceShow)(v.value0) + Data_Show.show(suitShow)(v.value1);
  });
  var cardViewShow = new Data_Show.Show(function (v) {
      return "@" + Data_Show.show(cardShow)(new Card(v.value0.value0, v.value1));
  });
  var gameStateShow = new Data_Show.Show(function (v) {
      var $256 = Data_List.length(v.players);
      if ($256 === 2) {
          if (v.players instanceof Data_List.Cons) {
              var $259 = Data_List.filter(function (v1) {
                  return v1.id === 0;
              })(v.players);
              if ($259 instanceof Data_List.Cons) {
                  var $261 = Data_List.filter(function (v1) {
                      return v1.id === 1;
                  })(v.players);
                  if ($261 instanceof Data_List.Cons) {
                      return "--------------------" + ("\n{" + (Data_Show.show(Data_Show.showInt)($259.value0.score) + ("} player0 \"" + ($259.value0.name + ("\": " + (showHand(cardShow)($259.value0.hand) + ("\nX" + (Data_Show.show(Data_Show.showInt)(v.perCardScore) + (" deck: " + (Data_Show.show(Data_Show.showInt)(Data_List.length(v.deck)) + (" cards\npile: " + (showHand(cardViewShow)(v.discard) + ("\n{" + (Data_Show.show(Data_Show.showInt)($261.value0.score) + ("} player1 \"" + ($261.value0.name + ("\": " + (showHand(cardShow)($261.value0.hand) + "\n--------------------\n"))))))))))))))))));
                  };
                  return Partial_Unsafe.unsafeCrashWith("no player 1.");
              };
              return Partial_Unsafe.unsafeCrashWith("no player 0..");
          };
          return Partial_Unsafe.unsafeCrashWith("no player 0.");
      };
      return Data_Generic.gShow(genericGamestate)(v);
  });
  var showPlay = function (gs) {
      return function (play) {
          if (gs.players instanceof Data_List.Cons) {
              if (play instanceof Play) {
                  return "\n** player " + (Data_Show.show(Data_Show.showInt)(gs.players.value0.id) + ("'s' move: " + Data_Function.apply(showHand(cardShow))(Data_Functor.map(Data_List.functorList)(toCard)(play.value0))));
              };
              return Partial_Unsafe.unsafeCrashWith("this should never happen.");
          };
          return Partial_Unsafe.unsafeCrashWith("this should never happen.");
      };
  };
  var burn = function (v) {
      return function (v1) {
          if (v instanceof Data_List.Cons && (v.value0.value0 instanceof Queen && v.value0.value1 instanceof Spades)) {
              return pickup(5)(v1);
          };
          if (v instanceof Data_List.Cons && v.value0.value0 instanceof Two) {
              var twos = Data_List.takeWhile(function (v2) {
                  return Data_Eq.eq(eqFace)(v2.value0.value0)(Two.value);
              })(v1.discard);
              return pickup(Data_List.length(twos) * 2 | 0)(v1);
          };
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v1);
      };
  };
  var handlePlay = function (v) {
      return function (playCardViews) {
          var reverseTurn = function (v1) {
              var $299 = {};
              for (var $300 in v1) {
                  if (v1.hasOwnProperty($300)) {
                      $299[$300] = v1[$300];
                  };
              };
              $299.players = Data_List.reverse(v1.players);
              return $299;
          };
          var repeat = function (__copy_v1) {
              return function (__copy_f) {
                  return function (__copy_x) {
                      var v1 = __copy_v1;
                      var f = __copy_f;
                      var x = __copy_x;
                      tco: while (true) {
                          var __tco_v1 = v1 - 1;
                          var __tco_f = f;
                          var __tco_x = f(x);
                          v1 = __tco_v1;
                          f = __tco_f;
                          x = __tco_x;
                          continue tco;
                      };
                  };
              };
          };
          var removeCards = function (p) {
              var $306 = {};
              for (var $307 in p) {
                  if (p.hasOwnProperty($307)) {
                      $306[$307] = p[$307];
                  };
              };
              $306.hand = Data_List.difference(eqCard)(p.hand)(Data_Functor.map(Data_List.functorList)(toCard)(playCardViews));
              return $306;
          };
          var playHand = function (v1) {
              if (v1.players instanceof Data_List.Cons) {
                  var $310 = {};
                  for (var $311 in v1) {
                      if (v1.hasOwnProperty($311)) {
                          $310[$311] = v1[$311];
                      };
                  };
                  $310.discard = Data_Semigroup.append(Data_List.semigroupList)(playCardViews)(v1.discard);
                  $310.alreadyDrew = false;
                  $310.players = new Data_List.Cons(removeCards(v1.players.value0), v1.players.value1);
                  return $310;
              };
              if (v1.players instanceof Data_List.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("no players.");
              };
              throw new Error("Failed pattern match at Game line 260, column 1 - line 310, column 23: " + [ v1.constructor.name ]);
          };
          var nextTurn = function (v1) {
              if (v1.players instanceof Data_List.Cons) {
                  var $318 = {};
                  for (var $319 in v1) {
                      if (v1.hasOwnProperty($319)) {
                          $318[$319] = v1[$319];
                      };
                  };
                  $318.players = Data_Semigroup.append(Data_List.semigroupList)(v1.players.value1)(new Data_List.Cons(v1.players.value0, Data_List.Nil.value));
                  return $318;
              };
              if (v1.players instanceof Data_List.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("no players.");
              };
              throw new Error("Failed pattern match at Game line 260, column 1 - line 310, column 23: " + [ v1.constructor.name ]);
          };
          var play = Data_Functor.map(Data_List.functorList)(toCard)(playCardViews);
          var $325 = Data_List.length(v.players);
          if ($325 === 2) {
              if (play instanceof Data_List.Nil) {
                  if (v.alreadyDrew) {
                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)((function () {
                          var $328 = {};
                          for (var $329 in v) {
                              if (v.hasOwnProperty($329)) {
                                  $328[$329] = v[$329];
                              };
                          };
                          $328.alreadyDrew = false;
                          return $328;
                      })())));
                  };
                  if (!v.alreadyDrew) {
                      return Data_Function.apply(pickup(1))((function () {
                          var $331 = {};
                          for (var $332 in v) {
                              if (v.hasOwnProperty($332)) {
                                  $331[$332] = v[$332];
                              };
                          };
                          $331.alreadyDrew = true;
                          return $331;
                      })());
                  };
                  throw new Error("Failed pattern match at Game line 265, column 17 - line 267, column 75: " + [ v.alreadyDrew.constructor.name ]);
              };
              if (play instanceof Data_List.Cons && play.value0.value0 instanceof Jack) {
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(Data_Function.apply(nextTurn)(playHand(v)))));
              };
              if (play instanceof Data_List.Cons && play.value0.value0 instanceof Ace) {
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(Data_Function.apply(nextTurn)(playHand(v)))));
              };
              return Data_Function.apply(burn(play))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(playHand(v))));
          };
          if (play instanceof Data_List.Nil) {
              if (v.alreadyDrew) {
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)((function () {
                      var $344 = {};
                      for (var $345 in v) {
                          if (v.hasOwnProperty($345)) {
                              $344[$345] = v[$345];
                          };
                      };
                      $344.alreadyDrew = false;
                      return $344;
                  })())));
              };
              if (!v.alreadyDrew) {
                  return Data_Function.apply(pickup(1))((function () {
                      var $347 = {};
                      for (var $348 in v) {
                          if (v.hasOwnProperty($348)) {
                              $347[$348] = v[$348];
                          };
                      };
                      $347.alreadyDrew = true;
                      return $347;
                  })());
              };
              throw new Error("Failed pattern match at Game line 276, column 17 - line 278, column 75: " + [ v.alreadyDrew.constructor.name ]);
          };
          return Data_Function.apply(burn(play))(Data_Function.apply(Gamestate)(Data_Function.apply(nextTurn)(playHand(v))));
      };
  };
  var allCards = Control_Bind.bind(Data_List.bindList)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_List.Cons.create)(Data_List.Nil.value)([ Clubs.value, Spades.value, Hearts.value, Diamonds.value ]))(function (v) {
      return Control_Bind.bind(Data_List.bindList)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_List.Cons.create)(Data_List.Nil.value)([ Ace.value, Two.value, Three.value, Four.value, Five.value, Six.value, Seven.value, Eight.value, Nine.value, Ten.value, Jack.value, Queen.value, King.value ]))(function (v1) {
          return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(new Card(v1, v));
      });
  });
  var update = function (v) {
      return function (v1) {
          if (v1 instanceof Play) {
              return function __do() {
                  var v2 = handlePlay(v)(v1.value0)();
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(checkForWinnerAndUpdateScores(v2))();
              };
          };
          if (v1 instanceof NewGame) {
              var addRemoveBots = function (__copy_players) {
                  var players = __copy_players;
                  tco: while (true) {
                      var $356 = Data_List.length(players);
                      if ($356 < 2) {
                          return Data_Function.apply(addRemoveBots)(new Data_List.Cons({
                              hand: Data_List.Nil.value, 
                              score: 0, 
                              name: "bot" + Data_Show.show(Data_Show.showInt)($356), 
                              id: 0, 
                              ipport: "", 
                              ai: true, 
                              queue: true
                          }, players));
                      };
                      if ($356 > 2) {
                          var $357 = Data_List.sort(ordPlayer)(players);
                          if ($357 instanceof Data_List.Cons && $357.value0.ai) {
                              players = $357.value1;
                              continue tco;
                          };
                          return $357;
                      };
                      return players;
                  };
              };
              var addIDs = function (v2) {
                  return function (v3) {
                      if (v3 instanceof Data_List.Cons) {
                          return new Data_List.Cons((function () {
                              var $363 = {};
                              for (var $364 in v3.value0) {
                                  if (v3.value0.hasOwnProperty($364)) {
                                      $363[$364] = v3.value0[$364];
                                  };
                              };
                              $363.id = v2;
                              return $363;
                          })(), addIDs(v2 + 1 | 0)(v3.value1));
                      };
                      if (v3 instanceof Data_List.Nil) {
                          return Data_List.Nil.value;
                      };
                      throw new Error("Failed pattern match at Game line 313, column 1 - line 315, column 52: " + [ v2.constructor.name, v3.constructor.name ]);
                  };
              };
              return function __do() {
                  var v2 = shuffle(allCards)();
                  if (v2 instanceof Data_List.Cons) {
                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Function.apply(Gamestate)(Data_Function.apply(Data_Foldable.foldr(Data_List.foldableList)(function (v3) {
                          return function (v4) {
                              var $375 = {};
                              for (var $376 in v4) {
                                  if (v4.hasOwnProperty($376)) {
                                      $375[$376] = v4[$376];
                                  };
                              };
                              $375.players = new Data_List.Cons((function () {
                                  var $372 = {};
                                  for (var $373 in v3) {
                                      if (v3.hasOwnProperty($373)) {
                                          $372[$373] = v3[$373];
                                      };
                                  };
                                  $372.hand = Data_Function.apply(Data_List.sort(ordCard))(Data_List.take(8)(v4.deck));
                                  return $372;
                              })(), v4.players);
                              $375.deck = Data_List.drop(8)(v4.deck);
                              return $375;
                          };
                      })((function () {
                          var $382 = {};
                          for (var $383 in v) {
                              if (v.hasOwnProperty($383)) {
                                  $382[$383] = v[$383];
                              };
                          };
                          $382.players = Data_List.Nil.value;
                          $382.deck = v2.value1;
                          $382.discard = new Data_List.Cons(new CardView(v2.value0, v2.value0.value1), Data_List.Nil.value);
                          $382.done = false;
                          $382.spectators = Data_List.filter(function (v3) {
                              return v3.queue === false;
                          })(v.spectators);
                          return $382;
                      })()))(Data_Function.apply(addIDs(0))(Data_Function.apply(addRemoveBots)(Data_Semigroup.append(Data_List.semigroupList)(Data_List.filter(function (v3) {
                          return v3.queue === true;
                      })(v.spectators))(v.players))))))();
                  };
                  return Partial_Unsafe.unsafeCrashWith("failed to initialize cards.")();
              };
          };
          if (v1 instanceof AddPlayer) {
              var randomName = function __do() {
                  var v2 = shuffle(new Data_List.Cons("erik", new Data_List.Cons("jafar", new Data_List.Cons("pablo", new Data_List.Cons("wang", new Data_List.Cons("morty", Data_List.Nil.value))))))();
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                      if (v2 instanceof Data_List.Cons) {
                          return v2.value0;
                      };
                      if (v2 instanceof Data_List.Nil) {
                          return "moe";
                      };
                      throw new Error("Failed pattern match at Game line 362, column 13 - line 366, column 1: " + [ v2.constructor.name ]);
                  })())();
              };
              return function __do() {
                  var v2 = randomName();
                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                      var $396 = {};
                      for (var $397 in v) {
                          if (v.hasOwnProperty($397)) {
                              $396[$397] = v[$397];
                          };
                      };
                      $396.spectators = new Data_List.Cons({
                          hand: Data_List.Nil.value, 
                          score: 0, 
                          name: v2, 
                          id: 0, 
                          ipport: v1.value0, 
                          ai: false, 
                          queue: true
                      }, v.spectators);
                      return $396;
                  })())();
              };
          };
          if (v1 instanceof RemovePlayer) {
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))((function () {
                  var $407 = {};
                  for (var $408 in v) {
                      if (v.hasOwnProperty($408)) {
                          $407[$408] = v[$408];
                      };
                  };
                  $407.spectators = Data_List.filter(function (v2) {
                      return v1.value0 === v2.ipport === false;
                  })(v.spectators);
                  $407.players = pipe(v.players)(Data_Functor.map(Data_List.functorList)(function (v2) {
                      var $403 = v2.ipport === v1.value0;
                      if ($403) {
                          var $404 = {};
                          for (var $405 in v2) {
                              if (v2.hasOwnProperty($405)) {
                                  $404[$405] = v2[$405];
                              };
                          };
                          $404.ai = true;
                          $404.name = v2.name + "bot";
                          return $404;
                      };
                      if (!$403) {
                          return v2;
                      };
                      throw new Error("Failed pattern match at Game line 370, column 42 - line 372, column 36: " + [ $403.constructor.name ]);
                  }));
                  return $407;
              })());
          };
          throw new Error("Failed pattern match at Game line 313, column 1 - line 315, column 52: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var ai = function (v) {
      if (v.players instanceof Data_List.Cons && v.discard instanceof Data_List.Cons) {
          var canPlay = function (v1) {
              return function (v2) {
                  if (v2.value0 instanceof Eight) {
                      return true;
                  };
                  return Data_Eq.eq(eqFace)(v2.value0)(v1.value0.value0) || Data_Eq.eq(eqSuit)(v2.value1)(v1.value1);
              };
          };
          var playableCards = Data_List.filter(canPlay(v.discard.value0))(v.players.value0.hand);
          var possiblePlays = Control_Bind.bind(Data_List.bindList)(playableCards)(function (v1) {
              var matchingCards = Data_List.filter(function (v2) {
                  return Data_Eq.eq(eqFace)(v1.value0)(v2.value0);
              })(v.players.value0.hand);
              return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(Data_Semigroup.append(Data_List.semigroupList)(Data_List.difference(eqCard)(matchingCards)(new Data_List.Cons(v1, Data_List.Nil.value)))(new Data_List.Cons(v1, Data_List.Nil.value)));
          });
          if (possiblePlays instanceof Data_List.Cons) {
              return Data_Function.apply(Play.create)(Data_Functor.map(Data_List.functorList)(mkCardView)(possiblePlays.value0));
          };
          if (possiblePlays instanceof Data_List.Nil) {
              return new Play(Data_List.Nil.value);
          };
          throw new Error("Failed pattern match at Game line 381, column 5 - line 383, column 24: " + [ possiblePlays.constructor.name ]);
      };
      return new Play(Data_List.Nil.value);
  };
  exports["Play"] = Play;
  exports["NewGame"] = NewGame;
  exports["AddPlayer"] = AddPlayer;
  exports["RemovePlayer"] = RemovePlayer;
  exports["Card"] = Card;
  exports["CardView"] = CardView;
  exports["Ace"] = Ace;
  exports["Two"] = Two;
  exports["Three"] = Three;
  exports["Four"] = Four;
  exports["Five"] = Five;
  exports["Six"] = Six;
  exports["Seven"] = Seven;
  exports["Eight"] = Eight;
  exports["Nine"] = Nine;
  exports["Ten"] = Ten;
  exports["Jack"] = Jack;
  exports["Queen"] = Queen;
  exports["King"] = King;
  exports["Gamestate"] = Gamestate;
  exports["Player"] = Player;
  exports["Clubs"] = Clubs;
  exports["Spades"] = Spades;
  exports["Hearts"] = Hearts;
  exports["Diamonds"] = Diamonds;
  exports["ai"] = ai;
  exports["allCards"] = allCards;
  exports["burn"] = burn;
  exports["checkForWinnerAndUpdateScores"] = checkForWinnerAndUpdateScores;
  exports["emptyGameState"] = emptyGameState;
  exports["handlePlay"] = handlePlay;
  exports["mkCardView"] = mkCardView;
  exports["pickup"] = pickup;
  exports["pipe"] = pipe;
  exports["reshuffle"] = reshuffle;
  exports["showHand"] = showHand;
  exports["showPlay"] = showPlay;
  exports["shuffle"] = shuffle;
  exports["toCard"] = toCard;
  exports["update"] = update;
  exports["genericGamestate"] = genericGamestate;
  exports["genericCardView"] = genericCardView;
  exports["genericPlayer"] = genericPlayer;
  exports["eqPlayer"] = eqPlayer;
  exports["ordPlayer"] = ordPlayer;
  exports["ordFace"] = ordFace;
  exports["ordSuit"] = ordSuit;
  exports["ordCard"] = ordCard;
  exports["genericFace"] = genericFace;
  exports["eqFace"] = eqFace;
  exports["genericSuit"] = genericSuit;
  exports["eqSuit"] = eqSuit;
  exports["genericCard"] = genericCard;
  exports["eqCard"] = eqCard;
  exports["gameStateShow"] = gameStateShow;
  exports["cardViewShow"] = cardViewShow;
  exports["cardShow"] = cardShow;
  exports["faceShow"] = faceShow;
  exports["suitShow"] = suitShow;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {                 

  exports.display = function(gs) {
      return function() {
    	if (typeof document != 'undefined')
    		displayo(gs)
      }
  }

  exports.timeout = function(milli) {
      return function(f) {
          return function() {
              setTimeout(f, milli)
          }
      }
  }
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = PS["Main"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Game = PS["Game"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];        
  var gameLoop = function (v) {
      if (v.done) {
          return function __do() {
              Control_Monad_Eff_Console.log(" -++- new game -++- ")();
              var v1 = Game.update(v)(Game.NewGame.value)();
              Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Game.gameStateShow)(v1))();
              $foreign.display(v1)();
              return Data_Function.apply($foreign.timeout(2000))(gameLoop(v1))();
          };
      };
      return function __do() {
          Data_Function.apply(Control_Monad_Eff_Console.log)(Game.showPlay(v)(Game.ai(v)))();
          var v1 = Data_Function.apply(Game.update(v))(Game.ai(v))();
          Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Game.gameStateShow)(v1))();
          $foreign.display(v1)();
          return Data_Function.apply($foreign.timeout(1000))(gameLoop(v1))();
      };
  };
  var main = gameLoop(Game.emptyGameState);
  exports["gameLoop"] = gameLoop;
  exports["main"] = main;
  exports["display"] = $foreign.display;
  exports["timeout"] = $foreign.timeout;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
